(()=>{"use strict";const e=class{constructor(){this.head=null}},a=class{constructor(e){this.value=e,this.next=null}};console.log("Testing HashMap Module");const t=new class{constructor(){this.size=47,this.map=new Array(this.size);for(let a=0;a<this.size;a++)this.map[a]=new e;this.loadFactor=.75,this.entryNum=0}hash(e){let a=0;for(let t=0;t<e.length;t++)a=31*a+e.charCodeAt(t);return a%=this.size,a}set(e,t){if("string"!=typeof e)throw new Error("Key is not a string.");let s=this.map[this.hash(e)],n=new a([e,t]);if(s.head){let a=s.head;if(a.value[0]===e)return void(a.value[1]=t);for(;a.next;)if(a=a.next,a.value[0]===e)return void(a.value[1]=t);a.next=n,this.entryNum+=1}else s.head=n,this.entryNum+=1}get(e){if("string"!=typeof e)throw new Error("Key is not a string.");let a=this.map[this.hash(e)];if(!a.head)return null;let t=a.head;if(t.value[0]===e)return t.value[1];for(;t.next;)if(t=t.next,t.value[0]===e)return t.value[1];return null}has(e){if("string"!=typeof e)throw new Error("Key is not a string.");let a=this.map[this.hash(e)];if(!a.head)return!1;let t=a.head;if(t.value[0]===e)return!0;for(;t.next;)if(t=t.next,t.value[0]===e)return!0;return!1}remove(e){if("string"!=typeof e)throw new Error("Key is not a string.");let a=this.map[this.hash(e)];if(!a.head)return!1;let t=a.head,s=null;if(t.value[0]===e)return a.head=t.next,this.entryNum-=1,!0;for(;t.next;)if(s=t,t=t.next,t.value[0]===e)return s.next=t.next,this.entryNum-=1,!0;return!1}length(){return this.entryNum}clear(){for(let a=0;a<this.size;a++)this.map[a]=new e;this.entryNum=0}keys(){let e=[];return this.map.forEach((a=>{if(a.head){let t=a.head;for(e.push(t.value[0]);t.next;)t=t.next,e.push(t.value[0])}})),e}values(){let e=[];return this.map.forEach((a=>{if(a.head){let t=a.head;for(e.push(t.value[1]);t.next;)t=t.next,e.push(t.value[1])}})),e}entries(){let e=[];return this.map.forEach((a=>{if(a.head){let t=a.head;for(e.push(t.value);t.next;)t=t.next,e.push(t.value)}})),e}};t.set("apple",1),t.set("banana",2),t.set("orange",3),t.set("grape",4),t.set("mango",5),console.log(t.hash("grape")),console.log(t.has("banana")),console.log(t.get("banana")),t.remove("banana"),console.log(t.has("banana")),console.log(t.length()),t.clear(),console.log(t.length()),t.set("apple",t.hash("apple")),t.set("aapple",t.hash("aapple")),t.set("aaapple",t.hash("aaapple")),t.set("banana",t.hash("banana")),t.set("bbanana",t.hash("bbanana")),t.set("bbbanana",t.hash("bbbanana")),t.set("orange",t.hash("orange")),t.set("oorange",t.hash("oorange")),t.set("ooorange",t.hash("ooorange")),t.set("mango",t.hash("mango")),t.set("mmango",t.hash("mmango")),t.set("mmmango",t.hash("mmmango")),t.set("grape",t.hash("grape")),t.set("ggrape",t.hash("ggrape")),t.set("gggrape",t.hash("gggrape")),console.log(t.keys()),console.log(t.values()),console.log(t.entries()),console.log("HashMap Module Testing Complete")})();